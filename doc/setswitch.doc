*setswitch.txt*     Adds buffer local capabilities to all Vim settings.

Version:    0.1.0
Author:     Stephen Davis
License:    The Unlicense
URL:        https://github.com/webdavis/vim-setswitch

==============================================================================
TABLE-OF-CONTENTS				 *setswitch-table-of-contents*

1.  Overview             |setswitch-overview|
2.  Installation         |setswitch-installation|
4.  Configuration        |setswitch-configuration|
5.  Vagrant              |setswitch-vagrant|
6.  Tests		 |setswitch-tests|
7.  Contributing         |setswitch-contributing|
8.  License	         |setswitch-license|
9.  Author		 |setswitch-author|

==============================================================================
OVERVIEW                                                  *setswitch-overview*

        I won't lie to you, setswitch is probably the most useful plugin I've
        created. I literally wouldn't want to use Vim without it. Here's why:

        - setswitch makes all settings buffer local. That means even settings
          like |hlsearch| are buffer local with setswitch.
        - setswitch can enable settings for the active window, while disabling
          settings for the other windows.
        - setswitch is only limited to your imagination. It works with any
          setting. Seriously, don't take my word for it. Just try it.

==============================================================================
INSTALLATION                                          *setswitch-installation*

        To install 'setswitch' use any one of your favorite plugin managers.

        vim-plug (https://github.com/junegunn/vim-plug) ~
 >
        Plug 'webdavis/vim-setswitch'
<

        Manual Installation ~

        Install it in Vim 8.0, like so:
 >
        mkdir -p ~/.vim/pack/start
        git clone git@github.com:webdavis/vim-setswitch.git ~/.vim/pack/start/vim-setswitch
<

==============================================================================
CONFIGURATION                                        *setswitch-configuration*

	setswitch is user extensible, meaning that the following settings should take any
	option available in Vim/Neovim.

GLOBAL-LISTS ~

g:setswitch_toggle                                          *setswitch_toggle*

g:setswitch_toggle = []

	g:setswitch_toggle takes a |List| of options as an argument. It turns
	these options on upon the cursor entering a window, and off upon the
	cursor exiting the window.

	For example, putting the following in your `~/.vimrc` instructs
	setswitch to toggle these setting when entering/exiting the window.
 >
        let g:setswitch_toggle = ['cursorline', 'cursorcolumn',
                                \ 'colorcolumn', 'relativenumber']

        " Or you can get creative.

        let g:setswitch_toggle = ['cursorline', 'nocursorcolumn',
                                \ 'nocolorcolumn', 'relativenumber']
<

g:setswitch_insert_toggle		             *setswitch_insert_toggle*

	Insert mode has it's own controller variable so that you can do unique
	things with it. `g:setswitch_insert_toggle` takes a |List| of options
	as an argument and turns these options off upon entering the insert
	mode, and on upon exiting insert mode.

	The following setting turns |relativenumber|, |cursorline|, and
	|cursorcolumn| off when entering the insert mode.
 >
	let g:setswitch_insert_toggle = ['relativenumber', 'cursorline',
				       \ 'cursorcolumn']
<

g:setswitch_command_toggle                          *setswitch_command_toggle*

        The command-line has it's own controller variable so that you can do
        unique things with it. `g:setswitch_command_toggle` takes a |List| of
        options as an argument and turns these options off upon entering the
        command-line, and on upon exiting the command-line.

        The following setting turns |relativenumber| and |hlsearch| off when
        entering the command-line.
 >
        let g:setswitch_command_toggle = ['relativenumber', 'hlsearch']
<

g:setswitch_hooks                                            *setswitch_hooks*

        g:setswitch_hooks takes a |List| of options instructing setswitch to
        listen for these options being set using the |OptionSet| autocommand.
        If they are set then setswitch will store the option and value of the
        option in the dictionary `s:setswitch` by file name.

        Put this in your `~/.vimrc` to instruct setswitch to store the values
        of the following options whenever the user sets them. Whenever the
        cursor enters the window where these are set, setswitch will set these
        values even if they were globally set in another window. This pairs
        nicely with Tpope's vim-unimpaired plugin:
        https://github.com/tpope/vim-unimpaired
 >
        let g:setswitch_hooks = ['cursorline', 'cursorcolumn', 'relativenumber',
                               \ 'wrap', 'hlsearch', 'colorcolumn']
<

GLOBAL DICTIONARIES ~

g:setswitch_exclude        		                  g:setswitch_exclude*

	g:setswitch_exclude is a |Dictionary| of the form:
 >
	g:setswitch_exclude = {
		\ filetype: ['option', 'option', 'option'...],
	\ }
<
	Put this in your `~/.vimrc`, to set options when the cursor enters
	certain filetypes. You're probably wondering why this is needed when
	the |ftplugin| directory exists. It's to prevent setswitch from
	activating options when you leave a window of a certain filetype
	without closing the window and then reenter it later. Unfortunately
	this is the best we can manage with Vim's present capabilities.

	Here is a useful example:
 >
	let g:setswitch_exclude = {
	    \ { 'netrw': ['nocolorcolumn', 'nocursorline', 'nocursorcolumn'] },
	    \ { 'man': ['nocolorcolumn', 'nocursorline', 'nocursorcolumn'] },
	    \ { 'help': ['nocolorcolumn', 'nocursorline', 'nocursorcolumn'] },
	    \ }
<
	Setswitch will set these options when entering the corresponding
	filetypes.

==============================================================================
VAGRANT                                                    *setswitch-vagrant*

        If you want to try setswitch out before installing it, there is a
        'Vagrantfile' that provisions a guest machine using shell scripts.

        Simple run the following commands from within the 'vim-setswitch'
        directory to try it out:
 >
        vagrant up Arch-Linux-setswitch
        vagrant ssh Arch-Linux-setswitch
<
        (Note that you may tailor the 'vagrant up --provision-with' command to
        your needs. Read through the 'Vagrantfile' for the available
        provisions.

==============================================================================
TESTS                                                        *setswitch-tests*

# TODO: a Makefile that executes Vim 8's assertion functions.

==============================================================================
CONTRIBUTING                                          *setswitch-contributing*

        I recommend you open an issue explaining what you would like before
        submitting a patch. There is a good chance I will just take care of it
        for you.

        Follow tpopes commit guidelines found here:

        https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

==============================================================================
LICENSE                                                    *setswitch-license*

        This plugin is distributed under the same terms as Vim.
        See ':help license'

==============================================================================
AUTHOR                                                      *setswitch-author*

        This project is maintained by Stephen A. Davis. Stephen's other
        projects can be found at https://github.com/webdavis.
