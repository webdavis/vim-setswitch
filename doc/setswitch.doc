*setswitch.txt*     Adds buffer local capabilities to all Vim settings.

Version:    0.1.0
Author:     Stephen Davis
License:    The Unlicense
URL:        https://github.com/webdavis/vim-setswitch

==============================================================================
TABLE-OF-CONTENTS				        *setswitch-table-of-contents*

1.  Overview             |setswitch-overview|
2.  Installation         |setswitch-installation|
4.  Configuration        |setswitch-configuration|
5.  Vagrant              |setswitch-vagrant|
6.  Tests		         |setswitch-tests|
7.  Contributing         |setswitch-contributing|
8.  License			     |setswitch-license|
9.  Author			     |setswitch-author|

==============================================================================
OVERVIEW                                *setswitch-overview*

        I won't lie to you, setswitch is probably the most useful plugin I've
        created. I literally wouldn't want to use Vim without it. Here's why:

        - setswitch makes all settings buffer local. That means even settings
          like |hlsearch| are buffer local with setswitch.
        - setswitch can enable settings for the active window, while disabling
          settings for the other windows.
        - setswitch is only limited to your imagination. It works with any
          setting. Seriously, don't take my word for it. Just try it.

==============================================================================
INSTALLATION                            *setswitch-installation*

        To install 'setswitch' use any one of your favorite plugin managers.

        vim-plug (https://github.com/junegunn/vim-plug) ~
 >
        Plug 'webdavis/vim-setswitch'
<

        Manual Installation ~

        Install it in Vim 8.0, like so:
 >
        mkdir -p ~/.vim/pack/start
        git clone git@github.com:webdavis/vim-setswitch.git ~/.vim/pack/start/vim-setswitch
<

==============================================================================
CONFIGURATION                           *setswitch-configuration*

        Setswitch is user extensible, meaning that in the following settings
        {option} can be replaced with any setting available in Vim/Neovim, and
        the |Lists| take any option availabe in Vim/Neovim.

GLOBAL-LISTS ~

g:setswitch_toggle                      *setswitch_toggle*

        g:setswitch_toggle takes a |List| of options as an argument. It turns
        these options on upon entering a window, and off upon exiting the
        window.

        For example, putting the following in your `~/.vimrc` instructs
        setswitch to toggle them when entering/exiting the window.
 >
        let g:setswitch_toggle = ['cursorline', 'cursorcolumn',
                                \ 'colorcolumn', 'relativenumber']

        " Or you can get creative.

        let g:setswitch_toggle = ['cursorline', 'nocursorcolumn',
                                \ 'nocolorcolumn', 'relativenumber']
<

g:setswitch_cmdmode_toggle              *setswitch_cmdmode_toggle*

        The command-line has it's own controller variable so that you can do
        unique things with it. |g:setswitch_cmdmode_toggle| takes a |List| of
        options as an argument and turns these options off upon entering the
        command-line, and on upon exiting the command-line.

        The following setting turns |relativenumber| and |hlsearch| off when
        entering the command-line.
 >
        let g:setswitch_cmdmode_toggle = ['relativenumber', 'hlsearch']
<

g:setswitch_hooks                       *setswitch_hooks*

        g:setswitch_hooks takes a |List| of options instructing setswitch to
        listen for these options being set using the |OptionSet| autocommand.
        If they are set then setswitch will store the option and value of the
        option in the dictionary |g:setswitch| by file name.

        Put this in your `~/.vimrc` to instruct setswitch to store the values of
        the following options whenever the user sets them. Whenever the cursor
        enters the window where these are set, setswitch will set these values
        even if they were globally set in another window. This pairs nicely
        with Tpope's vim-unimpaired plugin:
        https://github.com/tpope/vim-unimpaired
 >
        let g:setswitch_hooks = ['cursorline', 'cursorcolumn', 'relativenumber',
                               \ 'wrap', 'hlsearch', 'colorcolumn']
<

g:setswitch_no{option}_filetypes        *g:setswitch_nooption_filetypes*

        Put this in your `~/.vimrc`, replacing {option} with a Vim option, and
        set it equal to a list of filetypes to prevent setswitch from setting
        the named option in those filetypes when the window is focused. This
        is useful when you have added an option to g:setswitch_toggle that you
        do not want in certain filetypes.

        For example, put the following in your `~/.vimrc` to prevent these
        filetypes from setting the options in the list.
 >
        let g:setswitch_nocursorline_filetypes = ['markdown', 'netrw', 'man', 'help']
        let g:setswitch_nocursorcolumn_filetypes = ['markdown', 'netrw', 'man', 'help']
        let g:setswitch_nocolorcolumn_filetypes = ['netrw', 'man', 'help']
<

GLOBAL-VARIABLES ~

g:setswitch_{option}                    *g:setswitch_option*

        g:setswitch_{option} sets the default for whatever option you are
        setting. The is helpful for values that are evaluations of
        expressions. For example the value of |colorcolumn| is the summation
        of the expression <textwidth + 1>:
 >
        let g:setswitch_colorcolumn = '&l:textwidth + 1'
<
        Use this when you need the default to be set to something specific,
        like an |expression| or a |string|.

==============================================================================
VAGRANT                                 *setswitch-vagrant*

        If you want to try setswitch out before installing it, there is a
        'Vagrantfile' that provisions a guest machine using shell scripts.

        Simple run the following commands from within the 'vim-setswitch'
        directory to try it out:
 >
        vagrant up Arch-Linux-setswitch
        vagrant ssh Arch-Linux-setswitch
<
        (Note that you may tailor the 'vagrant up --provision-with' command to
        your needs. Read through the 'Vagrantfile' for the available
        provisions.

==============================================================================
TESTS                                   *setswitch-tests*

# TODO: a Makefile that executes Vim 8's assertion functions.

==============================================================================
CONTRIBUTING                            *setswitch-contributing*

        I recommend you open an issue explaining what you would like before
        submitting a patch. There is a good chance I will just take care of it
        for you.

        Follow tpopes commit guidelines found here:

        https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

==============================================================================
LICENSE                                 *setswitch-license*

        This plugin is distributed under the same terms as Vim.
        See ':help license'

==============================================================================
AUTHOR                                  *setswitch-author*

        This project is maintained by Stephen A. Davis. Stephen's other
        projects can be found at https://github.com/webdavis.
