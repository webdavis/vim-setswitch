" Settings for test script execution. Always use "sh", don't use the value of $SHELL.
set shell=sh

" Always use utf-8, instead of depending on the system locale.
set encoding=utf-8

" Use default shell on Windows to avoid segfault, caused by TUI.
if has('win32')
    let $SHELL = ''
    let $TERM = ''
    let &shell = empty($COMSPEC) ? exepath('cmd.exe') : $COMSPEC
    set shellcmdflag=/s/c shellxquote=\" shellredir=>%s\ 2>&1
    let &shellpipe = &shellredir
endif

" Set the runtimepath. To run plugin tests spin up the Ubuntu environment with the
" provided Dockerfile.
set runtimepath^=~/.vim
if has('packages')
   let &packpath = &runtimepath
endif

" Put settings that should be managed normally, here.
set number

" Provides user extensible buffer local capabilites for all Vim options.
" Enable the mouse.
if has('mouse') | set mouse=ar | endif

" Set the colorscheme.
colorscheme slate

filetype plugin indent on

" View man pages using :Man command.
runtime! ftplugin/man.vim

call plug#begin('~/.vim/plugged')

" For testing some plugin compatibility.
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'ludovicchabant/vim-gutentags'

call plug#end()

" Tells NERDtree whether to display line numbers in the tree window.
let g:NERDTreeShowLineNumbers = 1

" See this issue: https://github.com/majutsushi/tagbar/issues/146
let g:tagbar_show_linenumbers = 1

" Toggle these settings upon entering and exiting a window.
let g:setswitch = {
        \ 'all': ['colorcolumn=+1', 'cursorline', 'cursorcolumn', 'relativenumber'],
        \ 'netrw': ['colorcolumn=', 'nocursorline', 'nocursorcolumn'],
        \ 'man': ['colorcolumn=', 'nocursorline', 'nocursorcolumn'],
        \ 'help': ['colorcolumn=', 'nocursorline', 'nocursorcolumn'],
        \ 'gitcommit': ['colorcolumn=+1,51', 'nocursorline', 'nocursorcolumn', 'relativenumber'],
        \ 'nerdtree': ['colorcolumn=', 'nocursorline', 'nocursorcolumn', 'number', 'relativenumber'],
        \ 'tagbar': ['colorcolumn=', 'nocursorline', 'nocursorcolumn', 'number', 'relativenumber'],
        \ }

" Toggle these settings upon entering and exiting insert mode.
let g:setswitch_insert = {
        \ 'all': ['relativenumber', 'cursorline', 'cursorcolumn'],
        \ }

" Listen for these options to be set.
let g:setswitch_hooks = ['cursorline', 'cursorcolumn', 'relativenumber', 'wrap', 'hlsearch', 'colorcolumn']

" Some useful mappings for testing.
nnoremap <special> <F8> :<C-U>messages clear<CR>
nnoremap <special> <F9> :<C-U>messages<CR>
nnoremap <special> <F7> :execute "let a = ' '"<CR>:help<C-R>=a<CR>

" Enable For Testing Autocommands: uncomment this function and run
" `tail -f autocommand.log` to see autocmd's caught in real-time.
" function! s:LogAutocommands(event_name) abort
"     silent execute '!echo ' . a:event_name . ' >> autocommand.log'
" endfunction

augroup Test
    autocmd!
    " autocmd BufEnter * :echom "BufEnter " . expand('<amatch>') . " bufnr-" . bufnr('%')
    " autocmd OptionSet hlsearch,filetype :echom "OptionSet " . expand('<amatch>') . " bufnr-" . bufnr('%')
    " autocmd InsertEnter * :echom "InsertEnter " . expand('<amatch>') . " bufnr-" . bufnr('%')
    " autocmd InsertLeave * :echom "InsertLeave " . expand('<amatch>') . " bufnr-" . bufnr('%')
augroup END
